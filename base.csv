name,ring,quadrant,isNew,description
4 Devops Metrics,adopt,Techniques & Approaches,TRUE,"<p>To measure software delivery performance, more and more organizations are turning to the <strong>four key metrics</strong> as defined by the <a href=""https://www.devops-research.com/"">DORA research</a> program: change lead time, deployment frequency, mean time to restore (MTTR) and change fail percentage. This research and its statistical analysis have shown a clear link between high delivery performance and these metrics; they provide a great leading indicator for how a team, or even a whole delivery organization, is doing.</p><p>We're still big proponents of these metrics, but we've also learned some lessons since we first started monitoring them. And we're increasingly seeing misguided measurement approaches with tools that help teams measure these metrics based purely on their continuous delivery (CD) pipelines. In particular when it comes to the stability metrics (MTTR and change fail percentage), CD pipeline data alone doesn't provide enough information to determine what a deployment failure with real user impact is. Stability metrics only make sense if they include data about real incidents that degrade service for the users.</p>
<p>And as with all metrics, we recommend to always keep in mind the ultimate intention behind a measurement and use them to reflect and learn. For example, before spending weeks to build up sophisticated dashboard tooling, consider just regularly taking the <a href=""https://www.devops-research.com/quickcheck.html"">DORA quick check</a> in team retrospectives. This gives the team the opportunity to reflect on which <a href=""https://www.devops-research.com/research.html#capabilities"">capabilities</a> they could work on to improve their metrics, which can be much more effective than overdetailed out-of-the-box tooling.</p>"
Data Mesh,trial,Techniques & Approaches,TRUE,<p>Data mesh is to Data what microservices was to softw are engineering. It allows for decoupling of data storage from the use of that data. It positively drives forward product thinking in the data world. This is NOT a technology but it is a organisational approach that can be satisfied by many technologies </p>
Cross Functional Stream Aligned Teams ,adopt,Techniques & Approaches,FALSE,<p>Being able to solve a problem from start to finish within a team allows for a great degree of automony and ownership</p>
Platform engineering product teams,adopt,Techniques & Approaches,FALSE,"<p>We continue to see <strong>platform engineering product teams</strong> as a sensible default with the key insight being that they're just another <a href=""https://martinfowler.com/articles/products-over-projects.html"">product team</a>, albeit one focused on internal platform customers. Thus it is critical to have clearly defined customers and products while using the same engineering disciplines and ways of working as any other (externally focused) product team; platform teams aren't special in this regard. We strongly caution against just renaming existing internal teams ""platform teams"" while leaving ways of working and organizational structures unchanged. We're still big fans of using concepts from <a href=""https://teamtopologies.com/"">Team Topologies</a> as we think about how best to organize platform teams. We consider platform engineering product teams to be a standard approach and a significant enabler for high-performing IT.</p>"
Peer review equals PR,hold,Techniques & Approaches,FALSE,"<p> Some organizations seem to think peer review equals pull request; they've taken the view that the only way to achieve a peer review of code is via a pull request. We've seen this approach create significant team bottlenecks as well as significantly degrade the quality of feedback aerloaded reviewers begin to simply reject requests. Although the argument could be made that this is one way to demonstrate code review ""regulatory compliance,"" one of our clients was told this was invalid since there was no evidence the code was actually read by anyone prior to acceptance. Pull requests are only one way to manage the code review workflow; we urge people to consider other approaches, especially where there is a need to coach and pass on feedback carefully.</p>"
Production data in Test,hold,Techniques & Approaches,FALSE,"<p>We continue to perceive production data in test environments as an area for concern. Firstly, many examples of this have resulted in reputational damage, for example, where an incorrect alert has been sent from a test system to an entire client population. Secondly, the level of security, specifically around protection of private data, tends to be less for test systems. There is little point in having elaborate controls around access to production data if that data is copied to a test database that can be accessed by every developer and QA. Although you can obfuscate the data, this tends to be applied only to specific fields, for example, credit card numbers. Finally, copying production data to test systems can break privacy laws, for example, where test systems are hosted or accessed from a different country or region. This last scenario is especially problematic with complex cloud deployments. Fake data is a safer approach, and tools exist to help in its creation. We do recognize there are reasons for specific elements of production data to be copied, for example, in the reproduction of bugs or for training of specific ML models. Here our advice is to proceed with caution.</p>"
Slack,adopt,Collaboration & Productivity,FALSE,<p> Slack has become the uquitious tool of choice for engineers to communicate but can be used much wider. With effort it can push forward a culture of collaboration in a remote and asynchronous manner. It can also act as a searchable knowledge base or index</p>
Jira,adopt,Collaboration & Productivity,FALSE,<p>The tool everyone loves to hate </p>
Notion,trial,Collaboration & Productivity,FALSE,<p>Allows for internal wiki to live alongside public pages</p>
Remote mob programming ,trial,Collaboration & Productivity,TRUE,"<p>We continue to see many teams working and collaborating remotely; for these teams <strong>remote mob programming</strong> is a technique that is well worth trying. Remote mob programming allows teams to quickly ""mob"" around an issue or piece of code without the physical constraints of only being able to fit so many people around a pairing station. Teams can quickly collaborate on an issue or piece of code using their video conferencing tool of choice without having to connect to a big display, book a physical meeting room or find a whiteboard.</p>"
Greenhouse,adopt,Run the business tooling,TRUE,<p>Greenhouse greatly reduces the friction during the interview process. Additionally it provides a greater degree of transparency and consitency in communications. Integrates beautifully with LinkedIn and other recruitment portals</p>
Office 365,adopt,Run the business tooling,FALSE,<p>Office 365</p>
Kubernetes,hold,Platforms & Languages,FALSE,<p> The tooling around managed comntainer services has improved so much that rolling out a new kubernetes platform may prove to be an expensive route for littole gain</p>
Go,trial,Platforms & Languages,FALSE,"<p>Lightweight language quick to learn, like python but opinuated and easier to guarentee outcome</p>"
